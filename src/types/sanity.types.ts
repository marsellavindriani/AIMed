/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Home = {
  _id: string;
  _type: "home";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  aboutSection?: {
    title?: string;
    subtitle?: string;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    content?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
  };
  productsSection?: {
    title?: string;
    subtitle?: string;
    description?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    featuredProducts?: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "product";
    }>;
  };
  activitiesSection?: {
    title?: string;
    subtitle?: string;
    description?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
  };
  datasetsSection?: {
    title?: string;
    subtitle?: string;
    description?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    featuredDatasets?: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "dataset";
    }>;
  };
  partnersSection?: {
    title?: string;
    subtitle?: string;
    description?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
  };
};

export type Settings = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    metadataBase?: string;
    _type: "image";
  };
  address?: string;
  contact?: string;
  openingHour?: string;
  socialMedia?: {
    instagram?: string;
    facebook?: string;
    linkedIn?: string;
    youTube?: string;
    linktree?: string;
  };
};

export type Book = {
  _id: string;
  _type: "book";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  isIncludedInTeleotiva?: boolean;
  year?: string;
  publisher?: string;
  isbnNumber?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type IntellectualPropertyRights = {
  _id: string;
  _type: "intellectualPropertyRights";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  isIncludedInTeleotiva?: boolean;
  issuanceDate?: string;
  ipr?: string;
  type?: "Copyright" | "Patent";
  certificateNumber?: string;
  link?: string;
};

export type InternationalConference = {
  _id: string;
  _type: "internationalConference";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  isIncludedInTeleotiva?: boolean;
  publicationDate?: string;
  conference?: string;
  abstract?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  link?: string;
};

export type InternationalJournal = {
  _id: string;
  _type: "internationalJournal";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  isIncludedInTeleotiva?: boolean;
  publicationDate?: string;
  journal?: string;
  abstract?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  link?: string;
};

export type Researcher = {
  _id: string;
  _type: "researcher";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  role?: "Head" | "Secretary" | "Research Assistant" | "Member" | "External Collaborator" | "Student";
  degree?: "Bachelor" | "Master" | "Doctoral";
  batch?: number;
  division?: "Imaging" | "Signal" | "Tabular";
  thesisTitle?: string;
  title?: string;
  link?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type Research = {
  _id: string;
  _type: "research";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  year?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type Product = {
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  homePageUrl?: string;
  youtube?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  shortDescription?: string;
  description?: string;
  description1?: string;
  description2?: string;
  features?: Array<string>;
  details?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    media?: unknown;
    _type: "video";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    media?: unknown;
    name?: string;
    _type: "file";
    _key: string;
  } | {
    videoId?: string;
    _type: "youtube";
    _key: string;
  }>;
};

export type Partner = {
  _id: string;
  _type: "partner";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type Infrastructure = {
  _id: string;
  _type: "infrastructure";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  type?: "Means" | "Infrastructure";
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  specifications?: Array<{
    name?: string;
    values?: Array<string>;
    _key: string;
  }>;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type Dataset = {
  _id: string;
  _type: "dataset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  shortDescription?: string;
  description?: string;
  type?: "Tabular" | "Graph" | "Text" | "Signal" | "Image" | "Sound" | "Video";
  origin?: string;
  license?: string;
  numberOfRecords?: number;
  link?: string;
};

export type Activity = {
  _id: string;
  _type: "activity";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  isIncludedInTeleotiva?: boolean;
  date?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    media?: unknown;
    _type: "video";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    media?: unknown;
    name?: string;
    _type: "file";
    _key: string;
  } | {
    videoId?: string;
    _type: "youtube";
    _key: string;
  }>;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = Home | Settings | Book | IntellectualPropertyRights | InternationalConference | InternationalJournal | Researcher | Research | Product | Partner | Infrastructure | Dataset | Activity | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ../next-app/src/sanity/queries.ts
// Variable: aboutSectionQuery
// Query: *[_type == "home"][0]{aboutSection}
export type AboutSectionQueryResult = {
  aboutSection: {
    title?: string;
    subtitle?: string;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    content?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
  } | null;
} | null;
// Variable: activitiesSectionQuery
// Query: *[_type == "home"][0]{activitiesSection}
export type ActivitiesSectionQueryResult = {
  activitiesSection: {
    title?: string;
    subtitle?: string;
    description?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
  } | null;
} | null;
// Variable: datasetsSectionQuery
// Query: *[_type == "home"][0]{datasetsSection{...,featuredDatasets[]->}}
export type DatasetsSectionQueryResult = {
  datasetsSection: {
    title?: string;
    subtitle?: string;
    description?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    featuredDatasets: Array<{
      _id: string;
      _type: "dataset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      name?: string;
      slug?: Slug;
      images?: Array<{
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
        _key: string;
      }>;
      shortDescription?: string;
      description?: string;
      type?: "Graph" | "Image" | "Signal" | "Sound" | "Tabular" | "Text" | "Video";
      origin?: string;
      license?: string;
      numberOfRecords?: number;
      link?: string;
    }> | null;
  } | null;
} | null;
// Variable: productsSectionQuery
// Query: *[_type == "home"][0]{productsSection{...,featuredProducts[]->}}
export type ProductsSectionQueryResult = {
  productsSection: {
    title?: string;
    subtitle?: string;
    description?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    featuredProducts: Array<{
      _id: string;
      _type: "product";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      name?: string;
      slug?: Slug;
      homePageUrl?: string;
      youtube?: string;
      image?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      shortDescription?: string;
      description?: string;
      description1?: string;
      description2?: string;
      features?: Array<string>;
      details?: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
        };
        media?: unknown;
        name?: string;
        _type: "file";
        _key: string;
      } | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
        _key: string;
      } | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
        };
        media?: unknown;
        _type: "video";
        _key: string;
      } | {
        videoId?: string;
        _type: "youtube";
        _key: string;
      }>;
    }> | null;
  } | null;
} | null;
// Variable: partnersSectionQuery
// Query: *[_type == "home"][0]{partnersSection}
export type PartnersSectionQueryResult = {
  partnersSection: {
    title?: string;
    subtitle?: string;
    description?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
  } | null;
} | null;
// Variable: featuredDatasetsQuery
// Query: *[_type == "home"][0]{datasetsSection{featuredDatasets[]->{    name,    slug,    images,    shortDescription,    description  }}}
export type FeaturedDatasetsQueryResult = {
  datasetsSection: {
    featuredDatasets: Array<{
      name: string | null;
      slug: Slug | null;
      images: Array<{
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
        _key: string;
      }> | null;
      shortDescription: string | null;
      description: string | null;
    }> | null;
  } | null;
} | null;
// Variable: featuredProductsQuery
// Query: *[_type == "home"][0]{productsSection{featuredProducts[]->{    name,    slug,    image,    shortDescription,    description,    features  }}}
export type FeaturedProductsQueryResult = {
  productsSection: {
    featuredProducts: Array<{
      name: string | null;
      slug: Slug | null;
      image: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      } | null;
      shortDescription: string | null;
      description: string | null;
      features: Array<string> | null;
    }> | null;
  } | null;
} | null;
// Variable: settingsQuery
// Query: *[_type == "settings"][0]
export type SettingsQueryResult = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    metadataBase?: string;
    _type: "image";
  };
  address?: string;
  contact?: string;
  openingHour?: string;
  socialMedia?: {
    instagram?: string;
    facebook?: string;
    linkedIn?: string;
    youTube?: string;
    linktree?: string;
  };
} | null;
// Variable: allProductsQuery
// Query: *[_type == "product" && defined(slug.current)]{    _id,    name,    slug,    image,    shortDescription,    description,    features  }
export type AllProductsQueryResult = Array<{
  _id: string;
  name: string | null;
  slug: Slug | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  shortDescription: string | null;
  description: string | null;
  features: Array<string> | null;
}>;
// Variable: productQuery
// Query: *[_type == "product" && slug.current == $slug][0] {    ...,    details[]{        ...,        "url": asset->url      }  }
export type ProductQueryResult = {
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  homePageUrl?: string;
  youtube?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  shortDescription?: string;
  description?: string;
  description1?: string;
  description2?: string;
  features?: Array<string>;
  details: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
    url: null;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    media?: unknown;
    name?: string;
    _type: "file";
    _key: string;
    url: string | null;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
    url: string | null;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    media?: unknown;
    _type: "video";
    _key: string;
    url: string | null;
  } | {
    videoId?: string;
    _type: "youtube";
    _key: string;
    url: null;
  }> | null;
} | null;
// Variable: allDatasetsQuery
// Query: *[_type == "dataset" && defined(slug.current)]
export type AllDatasetsQueryResult = Array<{
  _id: string;
  _type: "dataset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  shortDescription?: string;
  description?: string;
  type?: "Graph" | "Image" | "Signal" | "Sound" | "Tabular" | "Text" | "Video";
  origin?: string;
  license?: string;
  numberOfRecords?: number;
  link?: string;
}>;
// Variable: datasetQuery
// Query: *[_type == "dataset" && slug.current == $slug][0]
export type DatasetQueryResult = {
  _id: string;
  _type: "dataset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  shortDescription?: string;
  description?: string;
  type?: "Graph" | "Image" | "Signal" | "Sound" | "Tabular" | "Text" | "Video";
  origin?: string;
  license?: string;
  numberOfRecords?: number;
  link?: string;
} | null;
// Variable: allActivitiesQuery
// Query: *[_type == "activity" && defined(slug.current)] | order(date desc, _updatedAt desc)
export type AllActivitiesQueryResult = Array<{
  _id: string;
  _type: "activity";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  isIncludedInTeleotiva?: boolean;
  date?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    media?: unknown;
    name?: string;
    _type: "file";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    media?: unknown;
    _type: "video";
    _key: string;
  } | {
    videoId?: string;
    _type: "youtube";
    _key: string;
  }>;
}>;
// Variable: activityQuery
// Query: *[_type == "activity" && slug.current == $slug][0] {    ...,    body[]{        ...,        "url": asset->url      }  }
export type ActivityQueryResult = {
  _id: string;
  _type: "activity";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  isIncludedInTeleotiva?: boolean;
  date?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
    url: null;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    media?: unknown;
    name?: string;
    _type: "file";
    _key: string;
    url: string | null;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
    url: string | null;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    media?: unknown;
    _type: "video";
    _key: string;
    url: string | null;
  } | {
    videoId?: string;
    _type: "youtube";
    _key: string;
    url: null;
  }> | null;
} | null;
// Variable: latestActivitiesQuery
// Query: *[_type == "activity" && defined(slug.current)] | order(date desc, _updatedAt desc) [0...$limit] {    _id,    title,    slug,    date,    image  }
export type LatestActivitiesQueryResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  date: string | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
}>;
// Variable: moreActivitiesQuery
// Query: *[_type == "activity" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc) [0...$limit] {    _id,    title,    slug,    date  }
export type MoreActivitiesQueryResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  date: string | null;
}>;
// Variable: allInternationalJournalsQuery
// Query: *[_type == "internationalJournal"] | order(publicationDate desc, _updatedAt desc)
export type AllInternationalJournalsQueryResult = Array<{
  _id: string;
  _type: "internationalJournal";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  isIncludedInTeleotiva?: boolean;
  publicationDate?: string;
  journal?: string;
  abstract?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  link?: string;
}>;
// Variable: allInternationalConferencesQuery
// Query: *[_type == "internationalConference"] | order(publicationDate desc, _updatedAt desc)
export type AllInternationalConferencesQueryResult = Array<{
  _id: string;
  _type: "internationalConference";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  isIncludedInTeleotiva?: boolean;
  publicationDate?: string;
  conference?: string;
  abstract?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  link?: string;
}>;
// Variable: allIntellectualPropertyRightsQuery
// Query: *[_type == "intellectualPropertyRights"] | order(issuanceDate desc, _updatedAt desc)
export type AllIntellectualPropertyRightsQueryResult = Array<{
  _id: string;
  _type: "intellectualPropertyRights";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  isIncludedInTeleotiva?: boolean;
  issuanceDate?: string;
  ipr?: string;
  type?: "Copyright" | "Patent";
  certificateNumber?: string;
  link?: string;
}>;
// Variable: allBooksQuery
// Query: *[_type == "book"] | order(year desc, _updatedAt desc)
export type AllBooksQueryResult = Array<{
  _id: string;
  _type: "book";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  isIncludedInTeleotiva?: boolean;
  year?: string;
  publisher?: string;
  isbnNumber?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
}>;
// Variable: allPublicationCountQuery
// Query: {    "internationalJournalCount": count(*[_type == "internationalJournal"]),    "internationalConferenceCount": count(*[_type == "internationalConference"]),    "intellectualPropertyRightsCount": count(*[_type == "intellectualPropertyRights"]),    "bookCount": count(*[_type == "book"])  }
export type AllPublicationCountQueryResult = {
  internationalJournalCount: number;
  internationalConferenceCount: number;
  intellectualPropertyRightsCount: number;
  bookCount: number;
};
// Variable: allResearchersQuery
// Query: *[_type == "researcher"]
export type AllResearchersQueryResult = Array<{
  _id: string;
  _type: "researcher";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  role?: "External Collaborator" | "Head" | "Member" | "Research Assistant" | "Secretary" | "Student";
  degree?: "Bachelor" | "Doctoral" | "Master";
  batch?: number;
  division?: "Imaging" | "Signal" | "Tabular";
  thesisTitle?: string;
  title?: string;
  link?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
}>;
// Variable: allInfrastructureQuery
// Query: *[_type == "infrastructure"]
export type AllInfrastructureQueryResult = Array<{
  _id: string;
  _type: "infrastructure";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  type?: "Infrastructure" | "Means";
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  specifications?: Array<{
    name?: string;
    values?: Array<string>;
    _key: string;
  }>;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
}>;
// Variable: allDocumentSlugs
// Query: {    "activitySlugs": *[_type == "activity"]{slug, _updatedAt},    "datasetSlugs": *[_type == "dataset"]{slug, _updatedAt},    "productSlugs": *[_type == "product"]{slug, _updatedAt},  }
export type AllDocumentSlugsResult = {
  activitySlugs: Array<{
    slug: Slug | null;
    _updatedAt: string;
  }>;
  datasetSlugs: Array<{
    slug: Slug | null;
    _updatedAt: string;
  }>;
  productSlugs: Array<{
    slug: Slug | null;
    _updatedAt: string;
  }>;
};
// Variable: allPartnerQuery
// Query: *[_type == "partner"]
export type AllPartnerQueryResult = Array<{
  _id: string;
  _type: "partner";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n  *[_type == \"home\"][0]{aboutSection}\n": AboutSectionQueryResult;
    "\n  *[_type == \"home\"][0]{activitiesSection}\n": ActivitiesSectionQueryResult;
    "\n  *[_type == \"home\"][0]{datasetsSection{...,featuredDatasets[]->}}\n": DatasetsSectionQueryResult;
    "\n  *[_type == \"home\"][0]{productsSection{...,featuredProducts[]->}}\n": ProductsSectionQueryResult;
    "\n  *[_type == \"home\"][0]{partnersSection}\n": PartnersSectionQueryResult;
    "\n  *[_type == \"home\"][0]{datasetsSection{featuredDatasets[]->{\n    name,\n    slug,\n    images,\n    shortDescription,\n    description\n  }}}\n": FeaturedDatasetsQueryResult;
    "\n  *[_type == \"home\"][0]{productsSection{featuredProducts[]->{\n    name,\n    slug,\n    image,\n    shortDescription,\n    description,\n    features\n  }}}\n": FeaturedProductsQueryResult;
    "\n  *[_type == \"settings\"][0]\n": SettingsQueryResult;
    "\n  *[_type == \"product\" && defined(slug.current)]{\n    _id,\n    name,\n    slug,\n    image,\n    shortDescription,\n    description,\n    features\n  }\n": AllProductsQueryResult;
    "\n  *[_type == \"product\" && slug.current == $slug][0] {\n    ...,\n    details[]{\n        ...,\n        \"url\": asset->url\n      }\n  }\n": ProductQueryResult;
    "\n  *[_type == \"dataset\" && defined(slug.current)]\n": AllDatasetsQueryResult;
    "\n  *[_type == \"dataset\" && slug.current == $slug][0]\n": DatasetQueryResult;
    "\n  *[_type == \"activity\" && defined(slug.current)] | order(date desc, _updatedAt desc)\n": AllActivitiesQueryResult;
    "\n  *[_type == \"activity\" && slug.current == $slug][0] {\n    ...,\n    body[]{\n        ...,\n        \"url\": asset->url\n      }\n  }\n": ActivityQueryResult;
    "\n  *[_type == \"activity\" && defined(slug.current)] | order(date desc, _updatedAt desc) [0...$limit] {\n    _id,\n    title,\n    slug,\n    date,\n    image\n  }\n": LatestActivitiesQueryResult;
    "\n  *[_type == \"activity\" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc) [0...$limit] {\n    _id,\n    title,\n    slug,\n    date\n  }\n": MoreActivitiesQueryResult;
    "\n  *[_type == \"internationalJournal\"] | order(publicationDate desc, _updatedAt desc)\n": AllInternationalJournalsQueryResult;
    "\n  *[_type == \"internationalConference\"] | order(publicationDate desc, _updatedAt desc)\n": AllInternationalConferencesQueryResult;
    "\n  *[_type == \"intellectualPropertyRights\"] | order(issuanceDate desc, _updatedAt desc)\n": AllIntellectualPropertyRightsQueryResult;
    "\n  *[_type == \"book\"] | order(year desc, _updatedAt desc)\n": AllBooksQueryResult;
    "\n  {\n    \"internationalJournalCount\": count(*[_type == \"internationalJournal\"]),\n    \"internationalConferenceCount\": count(*[_type == \"internationalConference\"]),\n    \"intellectualPropertyRightsCount\": count(*[_type == \"intellectualPropertyRights\"]),\n    \"bookCount\": count(*[_type == \"book\"])\n  }\n": AllPublicationCountQueryResult;
    "\n  *[_type == \"researcher\"]\n": AllResearchersQueryResult;
    "\n  *[_type == \"infrastructure\"]\n": AllInfrastructureQueryResult;
    "\n  {\n    \"activitySlugs\": *[_type == \"activity\"]{slug, _updatedAt},\n    \"datasetSlugs\": *[_type == \"dataset\"]{slug, _updatedAt},\n    \"productSlugs\": *[_type == \"product\"]{slug, _updatedAt},\n  }\n": AllDocumentSlugsResult;
    "\n  *[_type == \"partner\"]\n": AllPartnerQueryResult;
  }
}
